type Query {
  bookList(
    filter: String
    skip: Int
    first: Int
    orderBy: BookOrderByInput
  ): BookList!

  pageList(
    filter: String
    skip: Int
    first: Int
    orderBy: PageOrderByInput
  ): PageList!

  book(bookId: ID!): Book
}

type Mutation {
  newBook(
    title: String!
    author: String!
    publishedAt: String!
    preview: String!
  ): Book!

  updateBook(
    title: String!
    author: String!
    publishedAt: String!
    preview: String!
    bookId: String!
  ): Book!

  newPage(pageNum: Int!, content: String!, bookId: String!): Page!

  updatePage(pageNum: Int!, content: String!, pageId: String!): Page!

  signup(email: String!, password: String!, name: String!): AuthPayload

  login(email: String!, password: String!): AuthPayload

  uploadPhoto(file: Upload!, bookId: String!, pageId: String!): File!
}

scalar Upload

type File {
  id: ID!
  filename: String!
  mimetype: String!
  encoding: String!
}

type BookList {
  books: [Book!]!
  count: Int!
}

type PageList {
  pages: [Page!]!
  count: Int!
}

type AuthPayload {
  token: String
  user: User
}

enum BookOrderByInput {
  createdAt_ASC
  createdAt_DESC
}

enum PageOrderByInput {
  pageNum_ASC
  pageNum_DESC
}

type User {
  id: ID!
  createdAt: String!
  books: [Book!]!
  pages: [Page!]!

  name: String!
  email: String!
  password: String!
}

type Book {
  id: ID!
  createdAt: String!
  updatedAt: String!
  postedBy: User!
  pages: [Page!]!

  title: String!
  author: String!
  publishedAt: String!
  preview: String!
}

type Page {
  id: ID!
  createdAt: String!
  updatedAt: String!
  book: Book!
  postedBy: User!

  pageNum: Int!
  content: String!
}
